# -*- Mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# vim:ft=zsh:sw=4:sts=4:et

setopt localoptions extendedglob typesetsilent warncreateglobal

local -A opthash

zparseopts -E -D -A opthash h -help v -verbose q -quiet a -no-ansi n p: P: s: -sink: i -init || \
          { print -r -- "Improper options given, see help (-h/--help)"; return 1; }

(( ${+opthash[-h]} + ${+opthash[--help]} ))     && local OPT_HELP="-h"
(( ${+opthash[-v]} + ${+opthash[--verbose]} ))  && local OPT_VERBOSE="-v"
(( ${+opthash[-q]} + ${+opthash[--quiet]} ))    && local OPT_QUIET="-q"
(( ${+opthash[-a]} + ${+opthash[--no-ansi]} ))  && local OPT_NO_ANSI="-a"
(( ${+opthash[-n]} + ${+opthash[--only-new]} )) && local OPT_ONLY_NEW="-n"
(( ${+opthash[-p]} ))                           && local OPT_PASSWORD="${opthash[-p]}"
(( ${+opthash[-P]} ))                           && local OPT_PASSWORD_FILE="${opthash[-P]}"
(( ${+opthash[-s]} + ${+opthash[--sink]} ))     && local OPT_SINK="${opthash[-s]}${opthash[--sink]}"
(( ${+opthash[-i]} + ${+opthash[--init]} ))     && local OPT_INIT="-i"

local name="$1" address="$2"

[[ -z "$name" ]] && { print "Argument required, see atstr_setup -h/--help"; return 1; }
address="${address:-$DEFAULT_ATSTR_ADDRESS}"
[[ -z "$address" ]] && { print -r -- "Error: aborting, no address given (optional second argument, see -h/--help)"; return 1; }

typeset -g zredis_queue_${name}_type="STRING"
typeset -g zredis_queue_${name}_sink="${OPT_SINK-:$name}"
typeset -g zredis_queue_${name}_val_flagidx="1"
typeset -g zredis_queue_${name}_flagidx="flag_idx_${OPT_SINK-:$name}"

# Prepare password options
local -a password
password=( ${${=OPT_PASSWORD:+-p $OPT_PASSWORD}:-${=OPT_PASSWORD_FILE:+-P $OPT_PASSWORD_FILE}} )

@atstr_untie_if_tied "$name" "flag_idx_${name}"
ztie -d db/redis -f "${address}/${OPT_SINK-:$name}" "${password[@]}" -SL string "$name"
ztie -d db/redis -f "${address}/flag_idx_${OPT_SINK-:$name}" "${password[@]}" -SL string flag_idx_${name}

local -A var_to_value
var_to_value=( "$name" "" "flag_idx_$name" 0 )
if [[ -n "$OPT_INIT" ]]; then
    local output="" nam filename
    for nam in "$name" "flag_idx_$name"; do
        filename=$( mktemp -t ZshAtomicString.XXX )
        { : ${(P)nam::=${var_to_value[$nam]}}; } >"$filename" 2>&1
        IFS=$'\n' read nam < "$filename"; output+="$nam"
        command rm -f "$filename"
    done

    [[ "$output" = (#i)*error* ]] && {
        print -r -- "Warning: error occured (1): ${(M)output%error*}"
        @atstr_untie_if_tied "$name" "flag_idx_$name"
    }
else
    # Connect to the database, creating the key if needed
    local output="" nam filename
    for nam in "$name" "flag_idx_$name"; do
        filename=$( mktemp -t ZshAtomicString.XXX )
        { val=${(P)nam}; echo "val:$val";} >"$filename" 2>&1
        IFS=$'\n' read nam < "$filename"; output+="$nam"
        command rm -f "$filename"
    done

    [[ "$output" = (#i)*error* ]] && {
        print -r -- "Warning: error occured (2): ${(M)output%error*}"
        @atstr_untie_if_tied "$name" "flag_idx_$name"
    }
fi
